{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {createServer} from \"http\"\r\nimport {Server} from \"socket.io\"\r\nimport Koa from \"koa\";\r\nimport zod from \"zod\"\r\nimport fetch from \"node-fetch\";\r\nimport Router from \"@koa/router\";\r\nimport bodyParser from 'koa-bodyparser'\r\n\r\nexport interface Config{\r\n    authUrl:string,\r\n    socketPort:number,\r\n    socketPath:string,\r\n    backendPort:number,\r\n}\r\n\r\nconst authSchema = zod.object({\r\n    data:zod.string(),\r\n    contentType:zod.string().optional()\r\n});\r\n\r\nconst authResponse = zod.object({\r\n    user:zod.string(),\r\n});\r\n\r\nexport function startServer(config:Config){\r\n    const koa = new Koa()\r\n    const server = createServer();\r\n    const io = new Server(server,{path:config.socketPath});\r\n\r\n    io.on(\"connect\",socket => {\r\n        socket.on(\"auth\",async (data)=>{\r\n            const parsed = authSchema.safeParse(data);\r\n            if(parsed.success){\r\n                try {\r\n                    const res = await fetch(config.authUrl, {\r\n                        method: \"POST\",\r\n                        body: parsed.data.data,\r\n                        headers: {\r\n                            \"Content-Type\": parsed.data.contentType ?? \"text/html\",\r\n                        }\r\n                    })\r\n                    const parsedRes = authResponse.safeParse(await res.json())\r\n                    if(parsedRes.success){\r\n                        socket.join(\"user_\"+parsedRes.data.user)\r\n                    }\r\n                }catch (e){}\r\n            }\r\n        })\r\n    })\r\n\r\n    const router = new Router();\r\n\r\n    router.post(\"/send/:event/:user\",(ctx)=>{\r\n        io.in(\"user_\"+ctx.params.user).emit(ctx.params.event,ctx.body);\r\n    })\r\n\r\n    router.post(\"/send/:event\",(ctx)=>{\r\n        io.emit(ctx.params.event,ctx.body);\r\n    })\r\n\r\n    server.listen(config.socketPort);\r\n    koa.use(bodyParser());\r\n    koa.use(router.routes());\r\n    koa.use(router.allowedMethods());\r\n    koa.listen(config.backendPort)\r\n}"],"mappings":";AAAA,SAAQ,oBAAmB;AAC3B,SAAQ,cAAa;AACrB,OAAO,SAAS;AAChB,OAAO,SAAS;AAChB,OAAO,WAAW;AAClB,OAAO,YAAY;AACnB,OAAO,gBAAgB;AASvB,IAAM,aAAa,IAAI,OAAO;AAAA,EAC1B,MAAK,IAAI,OAAO;AAAA,EAChB,aAAY,IAAI,OAAO,EAAE,SAAS;AACtC,CAAC;AAED,IAAM,eAAe,IAAI,OAAO;AAAA,EAC5B,MAAK,IAAI,OAAO;AACpB,CAAC;AAEM,SAAS,YAAY,QAAc;AACtC,QAAM,MAAM,IAAI,IAAI;AACpB,QAAM,SAAS,aAAa;AAC5B,QAAM,KAAK,IAAI,OAAO,QAAO,EAAC,MAAK,OAAO,WAAU,CAAC;AAErD,KAAG,GAAG,WAAU,YAAU;AACtB,WAAO,GAAG,QAAO,OAAO,SAAO;AAC3B,YAAM,SAAS,WAAW,UAAU,IAAI;AACxC,UAAG,OAAO,SAAQ;AACd,YAAI;AACA,gBAAM,MAAM,MAAM,MAAM,OAAO,SAAS;AAAA,YACpC,QAAQ;AAAA,YACR,MAAM,OAAO,KAAK;AAAA,YAClB,SAAS;AAAA,cACL,gBAAgB,OAAO,KAAK,eAAe;AAAA,YAC/C;AAAA,UACJ,CAAC;AACD,gBAAM,YAAY,aAAa,UAAU,MAAM,IAAI,KAAK,CAAC;AACzD,cAAG,UAAU,SAAQ;AACjB,mBAAO,KAAK,UAAQ,UAAU,KAAK,IAAI;AAAA,UAC3C;AAAA,QACJ,SAAQ,GAAE;AAAA,QAAC;AAAA,MACf;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AAED,QAAM,SAAS,IAAI,OAAO;AAE1B,SAAO,KAAK,sBAAqB,CAAC,QAAM;AACpC,OAAG,GAAG,UAAQ,IAAI,OAAO,IAAI,EAAE,KAAK,IAAI,OAAO,OAAM,IAAI,IAAI;AAAA,EACjE,CAAC;AAED,SAAO,KAAK,gBAAe,CAAC,QAAM;AAC9B,OAAG,KAAK,IAAI,OAAO,OAAM,IAAI,IAAI;AAAA,EACrC,CAAC;AAED,SAAO,OAAO,OAAO,UAAU;AAC/B,MAAI,IAAI,WAAW,CAAC;AACpB,MAAI,IAAI,OAAO,OAAO,CAAC;AACvB,MAAI,IAAI,OAAO,eAAe,CAAC;AAC/B,MAAI,OAAO,OAAO,WAAW;AACjC;","names":[]}